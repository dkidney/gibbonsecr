% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions-fit.R
\name{gfit}
\alias{gfit}
\title{Fit an SECR model to survey data}
\usage{
gfit(capthist, model = list(), mask = NULL, fixed = list(),
  model.options = list(), mask.options = list(), fitting.options = list(),
  start = NULL, trace = FALSE)
}
\arguments{
\item{capthist}{\link[gibbonsecr]{gcapthist} object (or a
\link[secr]{capthist} object with \link[secr]{proximity} traps)}

\item{model}{list of formulae for the model parameters (see Details)}

\item{mask}{\link[gibbonsecr]{gmask} object (if \code{NULL} a default mask
is used)}

\item{fixed}{list of fixed values for the model parameters}

\item{model.options}{list of control options determining the type of model
to be fitted (see Details)}

\item{mask.options}{list of options for the default mask (see Details)}

\item{fitting.options}{list of options controlling the fitting process (see
Details)}

\item{start}{numeric vector of starting values for the fitting algorithm}

\item{trace}{if \code{TRUE}, information for each iteration of the fitting
procedure is printed to the console}
}
\description{
Fit a Spatially Explicit Capture-Recapture (SECR) model to
  survey data collected from arrays of proximity detectors.
}
\details{
Parameter estimates are obtained via numerical optimization using
  the \code{\link[stats]{nlm}} function.
\describe{
 \item{\strong{\code{model}}}{
  Should contain a list of formulae for the following paramters:
  \tabular{ll}{
   \code{D}         \tab density (number of animals/groups per square
   kilometre) \cr
   \code{g0}        \tab detection function intercept \cr
   \code{sigma}     \tab detection function scale (metres) \cr
   \code{z}         \tab detection function shape \cr
   \code{bearings}  \tab estimated bearings distribution scale \cr
   \code{distances} \tab estimated distances distribution shape \cr
   \code{pcall}     \tab availability (proportion) \cr
  }
  If no model is specified then intercept-only formulae are used.

  Model formulae can be specified using any of the the available covrariates
  (see \link[gibbonsecr]{gibbonsecr-covariates} for advice on model
  covariates).

  Smooth terms from the \pkg{\link[mgcv]{mgcv}} package -- including
  \code{\link[mgcv]{s}}, \code{\link[mgcv]{te}} and \code{\link[mgcv]{ti}} --
  can also be used. However, only the un-penalised components of the smooth
  terms are used (the design matrix is obtained from \code{\link[mgcv]{gam}}
  using \code{fit = FALSE}) and no smoothing penalties are estimated (i.e.
  models are fitted as un-penalised regression splines).
 }
 \item{\strong{\code{model.options}}}{
  Should be a list of three elements, named \code{detfunc},
  \code{bearings} and \code{distances}, with integer values. The table below
  shows the available settings (defaults in italics):
  \tabular{llll}{
   \code{detfunc} \tab 0 = \emph{half normal} \tab 1 = hazard rate \tab \cr
   \code{bearings} \tab 0 = no model \tab 1 = \emph{von Mises} \tab 2 =
   wrapped Cauchy \cr
   \code{distances} \tab 0 = \emph{no model} \tab 1 = gamma \tab 2 =
   lognormal \cr
  }
  If any of the elements are left blank then the default values are used.
 }
 \item{\strong{\code{mask.options}}}{
  Ignored unless the \code{mask} argument is \code{NULL}, in which case it
  should be a list of two elements named \code{buffer} and \code{spacing}
  giving the buffer and spacing to be used when constructing a default mask.
  If the mask and arguments are both \code{NULL} the should be a list of
  three elements, named \code{detfunc},
 }
 \item{\strong{\code{fitting.options}}}{
  Should be a list of the following elements:
  \tabular{ll}{
   \code{hessian} \tab if \code{TRUE}, the estimated
   hessian matrix is returned (default = TRUE) \cr
   \code{iterlim} \tab maximum number of fitting iterations (default = 1000)
   \cr
   \code{LLonly} \tab if \code{TRUE}, then the log-likelihood using the
   starting values is returned (default = FALSE) \cr
   \code{fit} \tab if \code{FALSE}, the arguments passed to
   \code{\link[stats]{nlm}} are returned (default = TRUE) \cr
  }
  If any of the elements are left blank then the default values are used.
 }
}
}
\examples{
\dontrun{

library(ggplot2)
data(N.annamensis)

# default settings -------------------------------------------------------------

# - half normal detection function
# - von Mises bearings error distribution
# - no model for estimated distances
fit = gfit(
    capthist = N.annamensis.capthist,
    mask     = N.annamensis.mask
)
summary(fit)

# D ~ habitat ------------------------------------------------------------------

fit = gfit(
    capthist = N.annamensis.capthist,
    mask     = N.annamensis.mask,
    model    = list(D ~ habitat)
)
summary(fit)

ggplot() + coord_fixed() +
    geom_fit(fit, "densurf") +
    geom_capthist(fit$capthist, "array") +
    scale_fill_distiller(palette = "Spectral") +
    labs(x = "Longitude", y = "Latitude")

# predict density for each habitat
newdata = data.frame(habitat = c("primary", "secondary"))
predict(fit, submodels = "D", newdata = newdata)


# sigma ~ habitat ------------------------------------------------------------------

fit = gfit(
    capthist = N.annamensis.capthist,
    mask     = N.annamensis.mask,
    model    = list(sigma ~ habitat)
)
summary(fit)

newdata = data.frame(habitat = c("primary", "secondary"))

ggplot() +
    geom_fit(fit, "detfunc", newdata = newdata[1, , drop = FALSE], col = 2) +
    geom_fit(fit, "detfunc", newdata = newdata[2, , drop = FALSE], col = 4) +
    labs(x = "Radial distance (m)", y = "Detection probability")

ggplot() +
    geom_fit(fit, "detfunc", newdata = newdata[1, , drop = FALSE], col = 2) +
    geom_fit(fit, "detfunc", newdata = newdata[1, , drop = FALSE], fill = 2,
             ci = TRUE, method = "boot") +
    geom_fit(fit, "detfunc", newdata = newdata[2, , drop = FALSE], col = 4) +
    geom_fit(fit, "detfunc", newdata = newdata[2, , drop = FALSE], fill = 4,
             ci = TRUE, method = "boot") +
    labs(x = "Radial distance (m)", y = "Detection probability")

# predict density for each habitat
predict(fit, submodels = "sigma", newdata = newdata)


# D ~ s(x, y) ------------------------------------------------------------------

fit = gfit(
    capthist = N.annamensis.capthist,
    mask     = N.annamensis.mask,
    model    = list(D ~ s(x, y, k = 3))
)
summary(fit)

ggplot() + coord_fixed() +
    geom_fit(fit, "densurf") +
    geom_fit(fit, "densurf", contour = TRUE) +
    geom_capthist(fit$capthist, "array") +
    scale_fill_distiller(palette = "Spectral") +
    labs(x = "Longitude", y = "Latitude")

# predict density for each habitat
newdata = data.frame(habitat = c("primary", "secondary"))
predict(fit, submodels = "D", newdata = newdata)
}

}
\author{
Darren Kidney \email{darrenkidney@googlemail.com}
}
\seealso{
\link[gibbonsecr]{plot.gsecr}
}

